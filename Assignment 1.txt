-- Part I – Working with an existing database

-- 1.0	Setting up Oracle Chinook
-- In this section you will begin the process of working with the Oracle Chinook database
-- Task – Open the Chinook_Oracle.sql file and execute the scripts within.
Use set schema 'chinook';
-- 2.0 SQL Queries
-- In this section you will be performing various queries against the Oracle Chinook database.
-- 2.1 SELECT
-- Task – Select all records from the Employee table.
SELECT * FROM employee;
-- Task – Select all records from the Employee table where last name is King.
SELECT * FROM employee WHERE lastname = 'King';
-- Task – Select all records from the Employee table where first name is Andrew and REPORTSTO is NULL.
SELECT * FROM employee WHERE firstname = 'Andrew' AND reportsto IS NULL;
-- 2.2 ORDER BY
-- Task – Select all albums in Album table and sort result set in descending order by title.
SELECT * FROM album ORDER BY title DESC;
-- Task – Select first name from Customer and sort result set in ascending order by city
SELECT firstname FROM customer ORDER BY city;
-- 2.3 INSERT INTO
-- Task – Insert two new records into Genre table
INSERT INTO genre (genreid, name) VALUES (30, 'Epic');
INSERT INTO genre (genreid, name) VALUES (31, 'Earworm');
-- Task – Insert two new records into Employee table
INSERT INTO employee (employeeid, firstname, lastname) VALUES (9, 'Jordan', 'Jordan');
INSERT INTO employee (employeeid, firstname, lastname, title, reportsto) VALUES (10, 'Harry', 'Harrison', 'Harrier', 9);
-- Task – Insert two new records into Customer table
INSERT INTO customer (customerid, firstname, lastname, company, email) VALUES (60, 'Billy', 'Williamson', 'Stuff Inc.', 'somewhere@place.gov');
INSERT INTO customer (customerid, firstname, lastname, address, email) VALUES (61, 'Bob', 'Terminus', '1111 A St. SE', 'reference@accesspoint.com');

-- 2.4 UPDATE
-- Task – Update Aaron Mitchell in Customer table to Robert Walter
UPDATE customer SET firstname = 'Robert', lastname = 'Walter' WHERE firstname = 'Aaron' AND lastname = 'Mitchell';
-- Task – Update name of artist in the Artist table “Creedence Clearwater Revival” to “CCR”
UPDATE artist SET name = 'CCR' WHERE name = 'Creedence Clearwater Revival';
-- 2.5 LIKE
-- Task – Select all invoices with a billing address like “T%”
SELECT * FROM invoice WHERE billingaddress like 'T%';
-- 2.6 BETWEEN
-- Task – Select all invoices that have a total between 15 and 50
SELECT * FROM invoice WHERE total BETWEEN 15 AND 30;
-- Task – Select all employees hired between 1st of June 2003 and 1st of March 2004
SELECT * FROM employee WHERE hiredate BETWEEN '2003-06-01 00:00:00' AND '2004-03-01 00:00:00';

-- 2.7 DELETE
-- Task – Delete a record in Customer table where the name is Robert Walter (There may be constraints that rely on this, find out how to resolve them).
DELETE FROM invoiceline WHERE invoiceid IN (
	SELECT invoiceid FROM invoice WHERE customerid IN (
		SELECT customerid FROM customer WHERE firstname = 'Robert' AND lastname = 'Walter'
	)
);
DELETE FROM invoice WHERE customerid IN (
	SELECT customerid FROM customer WHERE firstname = 'Robert' AND lastname = 'Walter'
);
DELETE FROM customer WHERE firstname = 'Robert' AND lastname = 'Walter';

-- 3.0	SQL Functions
-- In this section you will be using the Postgres system functions, as well as your own functions, to perform various actions against the database
-- 3.1 System Defined Functions
-- Task – Create a function that returns the current time.
CREATE OR REPLACE FUNCTION get_cur_time()
RETURNS TIMESTAMP AS $$
	BEGIN
		RETURN NOW();
	END;
$$ LANGUAGE plpgsql;

-- Task – create a function that returns the length of a mediatype(length of a single field) from the mediatype table: given mediatype id from media_types table -> field length
CREATE OR REPLACE FUNCTION get_media_length(id INTEGER)
RETURNS NUMERIC AS $$
DECLARE
	str TEXT;
BEGIN
	SELECT name INTO str FROM mediatype WHERE mediatypeid = id;
	RETURN char_length(str);
END;
$$ LANGUAGE plpgsql;

-- 3.2 System Defined Aggregate Functions
-- Task – Create a function that returns the average total of all invoices
CREATE OR REPLACE FUNCTION get_avg_price()
RETURNS NUMERIC AS $$
BEGIN
		RETURN AVG(total) FROM invoice;
END;
$$ LANGUAGE plpgsql;

-- Task – Create a function that returns the most expensive track (if several, just return one)
CREATE OR REPLACE FUNCTION get_max_price_track()
RETURNS INTEGER AS $$
DECLARE
	track1 INTEGER;
	max_u NUMERIC;
BEGIN
	max_u = MAX(unitprice) FROM track;
	SELECT trackid INTO track1 FROM track WHERE unitprice = max_u;
	RETURN track1;
END;
$$ LANGUAGE plpgsql;

-- 3.3 User Defined Scalar Functions
Task – Create a function that returns the average price of invoiceline items in the invoiceline table
CREATE OR REPLACE FUNCTION get_avg_inv_price()
RETURNS NUMERIC AS $$
BEGIN
		RETURN AVG(unitprice) FROM invoiceline;
END;
$$ LANGUAGE plpgsql;

-- 3.4 User Defined Table Valued Functions
-- Task – Create a function that returns all employees who are born after 1968.
CREATE OR REPLACE FUNCTION find_younger_employees()
RETURNS TABLE(
	employeeid INTEGER
) AS $$
BEGIN
	RETURN QUERY 
		SELECT employee.employeeid as employeeid
		FROM employee WHERE birthdate >=  '1969-01-01 00:00:00';
END;
$$ LANGUAGE plpgsql;


-- 4.0 Stored Procedures - No difference from functions in previous section
--  In this section you will be creating and executing stored procedures. You will be creating various types of stored procedures that take input and output parameters.
-- 4.1 Basic Stored Procedure
-- Task – Create a stored procedure that selects the first and last names of all the employees.
CREATE OR REPLACE FUNCTION find_all_names()
RETURNS TABLE(
	first_name character varying(20),
	last_name character varying(20)
) AS $$
BEGIN
	RETURN QUERY 
		SELECT employee.firstname as first_name, employee.lastname as last_name
		FROM employee;
END;
$$ LANGUAGE plpgsql;

-- 4.2 Stored Procedure Input Parameters
-- Task – Create a stored procedure that updates the personal information of an employee.
CREATE OR REPLACE FUNCTION update_employee_info(id INTEGER, e_city character varying(40), e_state character varying(40), e_country character varying(40))
RETURNS void AS $$
BEGIN
	UPDATE employee SET city = e_city, state = e_state, country = e_country WHERE employeeid = id;
END;
$$ LANGUAGE plpgsql;

-- Task – Create a stored procedure that returns the manager of an employee.
CREATE OR REPLACE FUNCTION find_manager(id INTEGER)
RETURNS TABLE(
	first_name character varying(20),
	last_name character varying(20)
) AS $$
DECLARE
	manager INTEGER;
BEGIN
	SELECT reportsto INTO manager FROM employee WHERE employeeid = id;
	RETURN QUERY 
		SELECT employee.firstname as first_name, employee.lastname as last_name
		FROM employee WHERE employeeid = manager;
END;
$$ LANGUAGE plpgsql;

-- 4.3 Stored Procedure Output Parameters
-- Task – Create a stored procedure that returns the name and company of a customer.
CREATE OR REPLACE FUNCTION find_cust_info(id INTEGER)
RETURNS TABLE(
	first_name character varying(20),
	last_name character varying(20),
	c_company character varying(80)
) AS $$
BEGIN
	RETURN QUERY 
		SELECT customer.firstname as first_name, customer.lastname as last_name, customer.company as c_company
		FROM customer WHERE customerid = id;
END;
$$ LANGUAGE plpgsql;

-- 5.0 Transactions
-- In this section you will be working with transactions. Transactions are usually nested within a stored procedure. You will also be working with handling errors in your SQL.
-- Task – Create a transaction that given a invoiceId will delete that invoice (There may be constraints that rely on this, find out how to resolve them).
CREATE OR REPLACE FUNCTION delete_invoice(id INTEGER)
RETURNS void AS $$
BEGIN
	DELETE FROM invoiceline WHERE invoiceid = id;
	DELETE FROM invoice WHERE invoiceid = id;
END;
$$ LANGUAGE plpgsql;

-- Task – Create a transaction nested within a stored procedure that inserts a new record in the Customer table
CREATE OR REPLACE FUNCTION insert_customer(id INTEGER, first_name character varying(20), last_name character varying(20), 
										  i_email character varying(60))
RETURNS void AS $$
BEGIN
	INSERT INTO customer (customerid, firstname, lastname, email) VALUES (id, first_name, last_name, i_email);
END;
$$ LANGUAGE plpgsql;

-- 6.0 Triggers
-- In this section you will create various kinds of triggers that work when certain DML statements are executed on a table.
-- 6.1 AFTER/FOR
-- Task - Create an after insert trigger on the employee table fired after a new record is inserted into the table.
CREATE OR REPLACE FUNCTION employee_insert_trig_function()
RETURNS TRIGGER AS $$
BEGIN
	IF(TG_OP = 'INSERT') THEN
		-- No functionality now
	END IF;
END;
$$ LANGUAGE plpgsql;
CREATE TRIGGER employee_insert_trig
AFTER INSERT ON employee
FOR EACH ROW
EXECUTE PROCEDURE employee_insert_trig_function();

-- Task – Create an after update trigger on the album table that fires after a row is inserted in the table
CREATE OR REPLACE FUNCTION album_update_trig_function()
RETURNS TRIGGER AS $$
BEGIN
	IF(TG_OP = 'UPDATE') THEN
		-- No functionality now
	END IF;
END;
$$ LANGUAGE plpgsql;
CREATE TRIGGER album_update_trig
AFTER UPDATE ON album
FOR EACH ROW
EXECUTE PROCEDURE album_update_trig_function();

-- Task – Create an after delete trigger on the customer table that fires after a row is deleted from the table.
CREATE OR REPLACE FUNCTION customer_delete_trig_function()
RETURNS TRIGGER AS $$
BEGIN
	IF(TG_OP = 'DELETE') THEN
		-- No functionality now
	END IF;
END;
$$ LANGUAGE plpgsql;
CREATE TRIGGER customer_delete_trig
AFTER DELETE ON customer
FOR EACH ROW
EXECUTE PROCEDURE customer_delete_trig_function();

-- 6.2 Before
-- Task – Create a before trigger that restricts the deletion of any invoice that is priced over 50 dollars. - restricts = prevents
CREATE OR REPLACE FUNCTION invoice_delete_trig_function()
RETURNS TRIGGER AS $$
BEGIN
	IF(TG_OP = 'DELETE' AND old.total > 50) THEN
		RETURN OLD;
	END IF;
	RETURN NEW;
END;
$$ LANGUAGE plpgsql;
CREATE TRIGGER invoice_delete_trig
BEFORE DELETE ON invoice
FOR EACH ROW
EXECUTE PROCEDURE invoice_delete_trig_function();



-- 7.0 JOINS
-- In this section you will be working with combing various tables through the use of joins. You will work with outer, inner, right, left, cross, and self joins.
-- 7.1 INNER
-- Task – Create an inner join that joins customers and invoices and specifies the name of the customer and the invoiceId.
SELECT customer.firstname, customer.lastname, invoice.invoiceid FROM customer
INNER JOIN invoice
ON (customer.customerid = invoice.customerid);

-- 7.2 OUTER
-- Task – Create an outer join that joins the customer and invoice table, specifying the CustomerId, firstname, lastname, invoiceId, and total.
SELECT customer.customerid, customer.firstname, customer.lastname, invoice.invoiceid, invoice.total FROM customer
FULL JOIN invoice
ON (customer.customerid = invoice.customerid);

-- 7.3 RIGHT+
-- Task – Create a right join that joins album and artist specifying artist name and title. (artist on the right)
SELECT artist.name, album.title FROM album
RIGHT JOIN artist
ON (album.artistid = artist.artistid);

-- 7.4 CROSS
-- Task – Create a cross join that joins album and artist and sorts by artist name in ascending order.
SELECT * FROM album 
CROSS JOIN artist
ORDER BY artist.name;

-- 7.5 SELF
-- Task – Perform a self-join on the employee table, joining on the reportsto column.
SELECT one.firstname, one.lastname, two.firstname, two.lastname
FROM employee one
INNER JOIN employee two
ON (one.employeeid = two.reportsto);